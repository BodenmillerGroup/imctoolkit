Getting started
===============

Loading images
--------------

imctoolkit supports a variety of data formats, including raw data files generated by IMC. To load an image, simply call
the corresponding function of the :class:`imctoolkit.Image` class, for example:

.. code-block::

    from imctoolkit import Image

    img = Image.read_tiff('/path/to/image.ome.tiff')

This will return an :class:`imctoolkit.Image` instance that holds the image data in :attr:`imctoolkit.Image.data` as
:class:`xarray.DataArray` for further use.

For convenience, basic properties of the image can be accessed through the :class:`imctoolkit.Image` instance, for
example to access the channel names:

.. code-block::

    print(img.channel_names)


Extracting single-cell data
---------------------------

The single-cell data for a given image and a corresponding cell mask can be accessed through the
:class:`imctoolkit.SingleCellData` class:

.. code-block::

    import tifffile

    from imctoolkit import SingleCellData

    mask = tifffile.imread('/path/to/mask.tiff')
    single_cell_data = SingleCellData(img, mask)

.. note::

    The :attr:`img` parameter of :func:`imctoolkit.SingleCellData.__init__` is not restricted to
    :class:`imctoolkit.Image` instances, but also accepts e.g. numpy arrays and xarray DataArrays.

The resulting :class:`imctoolkit.SingleCellData` instance provides a range of properties to extract single-cell data
for the provided image/cell mask pair, either as :class:`xarray.DataArray` or as :class:`pandas.DataFrame` table
(properties suffixed by ``_table``). For example, to extract the channel-wise mean intensities:

.. code-block::

    print(single_cell_data.mean_intensities_table)

.. note::

    These properties will be computed upon first access (`lazy`), and at first access only (`cached`).

In addition to ``intensity`` properties, the :class:`imctoolkit.SingleCellData` class also provides access to region
properties of the cell mask (``regionprops``, lazy and cached):

.. code-block::

    print(single_cell_data.regionprops_table[SingleCellData.RegionProperties.AREA])

The list of available region properties is a subset of scikit-image's supported region properties. It defaults to
:attr:`imctoolkit.SingleCellData.DEFAULT_REGION_PROPERTIES` and can be customized at instantiation using the
:attr:`region_properties` attribute of :func:`imctoolkit.SingleCellData.__init__`.

All single-cell information accessible through :class:`imctoolkit.SingleCellData` can be exported to a number of data
formats for further data analysis, for example:

.. code-block::

    single_cell_data.to_anndata().write('/path/to/single_cell_data.h5ad')

.. warning::

    Export operations evaluate all lazy properties of this class and thus require sufficient computational resources
    (both memory and processing power).


Constructing spatial cell graphs
--------------------------------

To construct spatial cell graphs ("neighborhood graphs") from single-cell data, simply call the appropriate
``construct_`` function of the :class:`imctoolkit.SpatialCellGraph` class, for example:

.. code-block::

    from imctoolkit import SpatialCellGraph

    dist_mat = single_cell_data.compute_border_distances()
    knn_graph = SpatialCellGraph.construct_knn_graph(single_cell_data, dist_mat, 5)

.. note::

    The :attr:`data` parameter of :func:`imctoolkit.SpatialCellGraph.__init__` is not restricted to
    :class:`imctoolkit.SingleCellData` instances, but also accepts e.g. pandas DataFrames.

The resulting :class:`imctoolkit.SpatialCellGraph` objects hold the cell data and an adjacency matrix, and can be
exported to popular graph data formats for further analysis, for example:

.. code-block::

    knn_graph.to_igraph().write_graphml('/path/to/knn_graph.graphml')

.. note::

    The exported graph will contain all single-cell data as node attributes.
